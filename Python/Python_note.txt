python笔记
2017-11-17
1、type()返回数据项的数据类型：a=1.2 type(a)
2、命令惯例
   1）以单一下划线开变量名(_x)不会被from module import *语句导入
   2）前后下划线的变量名是系统定义的变量
   3）两个下划线开头（__X）时类的本地变量

注意：变量名没有类型，对象才有

3、组合数据类型
   1）序列类型
     列表   元组   字符串也属于序列类型
 
   2）集合类型  集合
   3）映射类型  字典

注意：列表本身可以修改，可以在原处修改

4、实质上，列表和元组并不真正存储数据，而是存放对象引用

5、python提供了4组逻辑运算
   1）身份操作符：is (判断左端对象引用是否相同与右端对象引用）
   2）比较操作符:  < 、 > 、 <= 、 >=、 ！= 、 ==
   3）成员操作符： in  或 not in
   4）逻辑运算符: and or  not

6、python 数据类型也可以使用增强的赋值操作符（+=，-+），  使用增强赋值操作符的性能较好

7、python 的int时不可变的
	例如：  >>> x = 1  
		>>> id(x)  
		31106520  
		>>> y = 1  
		>>> id(y)  
		31106520  

8、输入和输出  
   输出： python3  print()函数
          python print 语句
  
   输入：input()
	 raw_input()

	1.以下两行在事实上等价：
	sys.stdout.write('hello'+'\n') 
	print 'hello'

	2.以下两组在事实上等价：
	hi=raw_input('hello? ') 
	print 'hello? ', #comma to stay in the same line 
	hi=sys.stdin.readline()[:-1] # -1 to discard the '\n' in input stream

9、标准输入 标准输出 标准错误：
	sys.stdin,sys.stdout,sys.stderr: stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象  
	如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的
	sys.stdin  sys.stdout  sys.stderr

10、- :表示左对齐，默认右对齐
    

>>> d = {'x':32,'y':27.9332,'z':65}
>>> print ("%(x)-10d %(y)0.3g" %d)
32         27.9
>>> 
注意：g,G 指数小于-4或更高精度时，使用%e 或 %E，否则使用%f

11、每个python函数都有一个返回值，默认为None,  也可以使用return value 明确定义返回值

12、callable()用于测试函数是否可调用  
    callable(testFunc)

13、同一行放置多个语句  ；以分号作为分隔符

14、文档 Python允许通过__doc__动态获得文档字串
    统一4个字符缩进
15、主函数
    1）最高级别的python语句（没有缩进）在模块被导入时就会执行，无论是否真的需要执行
    2）__name__指示模块应该如何被加载
      如果模块被导入，__name__的值就是模块名字
      如果模块是直接执行，__name__的值就是"__main__"

16、实例被创建后，其身份和类型不可改变
    对象值可修改，称为可变对象 否则，不可变对象

17、id()可返回一个对象的身份，即对象在内存中的位置
    type()用于返回一个对象的类型

18、内置类型：
    数字：int  long  float  complex  bool 
    序列：str Unicode list tuple  xrange
    映射：dict
    集合：set(set无序排序且不重复，是可变的，有add（），remove（）等方法。既然是可变的，所以它不存在哈希值)
	  frozenset(frozenset是冻结的集合，它是不可变的，存在哈希值)

19、 list(s)  将字符串转为列表
     tuple(s) 将字符串转为元组
     set(s) 将字符串转为集合
     frozenset 将字符串转为不可变集合
     dict(d)  创建字典  其d 必须时（key,value）的元组序列


20、
    1、数字操作
    x+y  x-y  x*y  x/y  
    x//y(截断除法)  （导入精确除法后，若要执行截断除法）（from __future__ import division）  x**y  x%y  -x  -y

    2、比较操作
    x << y     x >> y    x & y   x | y    x ^ y  ~x



21、序列的操作和方法
    s[i]   s[i:j]  s[i:j:stride]  len(s)  min(s)  max(s)  sum(s)  all(s)  any(s)
    
    s[i] = v   s[i:j] = t   s[i:j:stride] = t   del s[i]  del s[i:j] del[i:j:stride]
  
22、可用于列表的方法
   list(s)  将s转换为一个列表
   s.append(x)  将一个新元素x追加到s末尾
   s.extend(x)  将新的列表t追加到s末尾
   s.count(x)   计算s中x出现的次数
   s.index(x,[start [, stop]]  当s[i] == x时，返回最小的i,可选择参数stop用于指定搜索的起始和结束索引
<<<<<<< HEAD
   s.insert(i,x)  在索引i处插入x
   s.pop(i)  返回元素i并从列表中移除它，如果省略i,则返回列表
             最后一个元素
	
	s.remove(x)   搜索x并从s中移除它
	s.reverse()   颠倒s中所有元素的顺序
	s.sort(key)  
	例如：  以列表内元素的长度来排序
	        >>> x = ['hello','abc','iplaypython.com']
			>>> x.sort(key=len)
			>>> x
			['abc', 'hello', 'iplaypython.com']
			
字符串操作：
	字节字符串：字节序列
	unicode字符串：unicode字符序列
	s.captitalize()   首字符变大写
	s.index(sub[,start[,end]])  子字符串sub首次出现的位置
	
   
   
   
   
   
   
   
   
   


=======
   s.insert(i,x) 在索引i处插入x
   s.pop([i]) 返回元素i并从列表中移除它，如果省略i,则返回列表中最后一个元素
   s.remove(x) 搜索x并从s中移除它
   s.reverse() 颠倒s中所有元素的顺序
   s.sort([key[,reverse]]) 对s中的所有元素进行排序。key是一个键函数。
	x = ['mmm', 'mm', 'mm', 'm' ]
	x.sort(key = len)
	print x # ['m', 'mm', 'mm', 'mmm']

23、列表：
      1.>>> l1 = [1,2,3,4]
	>>> l3 = l1[:]  #通过复制原列表重新开辟空间
	>>> print(l3)
	[1, 2, 3, 4]
	>>> 

       2.>>> import copy
	>>> l2 = copy.deepcopy(l1) #深拷贝  重新开辟空间
	>>> id(l2)

       3.>>> l1 = [1,2,3,4]
	>>> l2 = l1  #浅拷贝，指向同一个空间
	>>> id(l1)
	140576962876616
	>>> id(l2)
	140576962876616
	>>>
    
        4.>>> t1 = 'x','y','z'  #定义元组可以把小括号去掉
	>>> print(t1)
	('x', 'y', 'z')
	>>> 

        5.虽然元组本身不可变，但如果元组内嵌套了可变类型的元素，那么此类元素不会返回新元组
	>>> l1 = ('x',[1,2,3])
	>>> print(l1)
	('x', [1, 2, 3])
	>>> l1[1]
	[1, 2, 3]
	>>> l1[1][0] = 2
	>>> print(l1)
	('x', [2, 2, 3])
	>>>

	6.序列操作总结
	s + r   连接

	s * n, n * s  制作s的n个副本，n为整数
	>>> l1*2
	('x', [2, 2, 3], 'x', [2, 2, 3])

	v1, v2, ...., vn  = s   变量解包

	序列操作符
	x in s, x not in s    #从属关系
	for x in s:				#迭代
	all(s) 					#如果s中所有项都为true，则返回true
	any(s)					#如果s中任意项为true,则返回true
	len(s)					#长度
	min(s)					#s中的最小项
	max(s)					#s中最大项
	sum(s[,initial])   具有可选初始值的项的和
	
列表类型支持的操作
	1.s[i] = x  索引赋值
	
	2.>>> d1.copy()  #深拷贝
	{'x': 32, 'y': [1, 2, 3, 4]}
	>>> d3 = d1.copy()
	>>> d2 = d1  #浅拷贝
	
	>>> d1.get('z')  #不投出异常
	>>> g1['z']   #投出异常
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	NameError: name 'g1' is not defined
	>>> 


	
	3.>>> d1.items()  #返回元组
	dict_items([('x', 32), ('y', [1, 2, 3, 4])])
	>>> t1,t2 = d1.items()  #变量解包
	>>> print (t1)
	('x', 32)
	>>> print (t2)
	('y', [1, 2, 3, 4])
	>>> 

	注意：解包元素必须相等
	
	4.>>> d1.pop('x')  #弹出指定元素的值
	32
	>>> print (d1)
	{'y': [1, 2, 3, 4]}
	>>> d2 = {'x':1,'y':2,'z':3}
	>>> d2.popitem()  #随机弹出键值
	('z', 3)
	>>> d2.popitem()
	('x', 1)
	>>> 

	5.>>> d1 = {'x':1,'y':2}
	>>> d2 = {'m':21,'n':76,'y':44}
	>>> d1.update(d2)   #合并字典
	>>> print(d1)
	{'m': 21, 'n': 76, 'x': 1, 'y': 44}  #如果键相同，会修改原来的键值
	>>> 

	
	6. 
	>>> d1 = {'x':1,'y':2}
	>>> d2 = {'m':21,'n':76,'y':44}
	>>> d1.update(d2)
	>>> for i in il1:
	...     print(i)
	... 
	('y', 44)
	('n', 76)
	('m', 21)
	('x', 1)

	7.
	>>> zip('xyz','123')
	<zip object at 0x7fca7fcc7bc8>
	>>> list(zi1)  #需要使用list()强制转换了
	[('x', '1'), ('y', '2'), ('z', '3')]
	
	8. 集合类型的方法和操作
	len(s)   			#返回s中项目数
	s.copy() 			#制作s的一份副本
	s.difference(t) 	#求差集，返回所有在s中，但不在t中的项目
	s.intersection(t) 	#求交集，返回所有同时在s和t中的项目
	s.isdisjoint(t)		#如果s和t没有相同项，则返回True
	s.issubset(t)		#如果s和t的一个子集，则返回True
	s.issuperset(t)		#如果s是t的一个超集，则返回True
	s.symmetric_difference(t) #求对称差集，返回所有在s或t中，但又不同时在这两个集合中的项
	
	s.union(t)			#求并集，返回所有在s或t中的项
	
	集合操作
	s | t  		# s和t的并集
	s & t1		# s和t的交集
	s - t 		# 求差集
	len(s)		# 集合中项数
	max(s)		# 最大值
	min(s)		# 最小值
	
	9.计数器的引用计数
	sys.getrefcount(a)  
	
	10.
	
	
	
	
	